Help on DockerClient in module docker.client object:

class DDoocckkeerrCClliieenntt(builtins.object)
 |  A client for communicating with a Docker server.
 |  
 |  Example:
 |  
 |      >>> import docker
 |      >>> client = docker.DockerClient(base_url='unix://var/run/docker.sock')
 |  
 |  Args:
 |      base_url (str): URL to the Docker server. For example,
 |          ``unix:///var/run/docker.sock`` or ``tcp://127.0.0.1:1234``.
 |      version (str): The version of the API to use. Set to ``auto`` to
 |          automatically detect the server's version. Default: ``1.30``
 |      timeout (int): Default timeout for API calls, in seconds.
 |      tls (bool or :py:class:`~docker.tls.TLSConfig`): Enable TLS. Pass
 |          ``True`` to enable it with default options, or pass a
 |          :py:class:`~docker.tls.TLSConfig` object to use custom
 |          configuration.
 |      user_agent (str): Set a custom user agent for requests to the server.
 |      credstore_env (dict): Override environment variables when calling the
 |          credential store process.
 |  
 |  Methods defined here:
 |  
 |  ____ggeettaattttrr____(self, name)
 |  
 |  ____iinniitt____(self, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cclloossee(self)
 |      Closes all adapters and as such the session
 |  
 |  ddff(self)
 |      Get data usage information.
 |      
 |      Returns:
 |          (dict): A dictionary representing different resource categories
 |          and their respective data usage.
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |  
 |  eevveennttss(self, *args, **kwargs)
 |      Get real-time events from the server. Similar to the ``docker events``
 |      command.
 |      
 |      Args:
 |          since (UTC datetime or int): Get events from this point
 |          until (UTC datetime or int): Get events until this point
 |          filters (dict): Filter the events by event time, container or image
 |          decode (bool): If set to true, stream will be decoded into dicts on
 |              the fly. False by default.
 |      
 |      Returns:
 |          A :py:class:`docker.types.daemon.CancellableStream` generator
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |      
 |      Example:
 |      
 |          >>> for event in client.events(decode=True)
 |          ...   print(event)
 |          {u'from': u'image/with:tag',
 |           u'id': u'container-id',
 |           u'status': u'start',
 |           u'time': 1423339459}
 |          ...
 |      
 |          or
 |      
 |          >>> events = client.events()
 |          >>> for event in events:
 |          ...   print(event)
 |          >>> # and cancel from another thread
 |          >>> events.close()
 |  
 |  iinnffoo(self, *args, **kwargs)
 |      Display system-wide information. Identical to the ``docker info``
 |      command.
 |      
 |      Returns:
 |          (dict): The info as a dict
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |  
 |  llooggiinn(self, *args, **kwargs)
 |      Authenticate with a registry. Similar to the ``docker login`` command.
 |      
 |      Args:
 |          username (str): The registry username
 |          password (str): The plaintext password
 |          email (str): The email for the registry account
 |          registry (str): URL to the registry.  E.g.
 |              ``https://index.docker.io/v1/``
 |          reauth (bool): Whether or not to refresh existing authentication on
 |              the Docker server.
 |          dockercfg_path (str): Use a custom path for the Docker config file
 |              (default ``$HOME/.docker/config.json`` if present,
 |              otherwise``$HOME/.dockercfg``)
 |      
 |      Returns:
 |          (dict): The response from the login request
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |  
 |  ppiinngg(self, *args, **kwargs)
 |      Checks the server is responsive. An exception will be raised if it
 |      isn't responding.
 |      
 |      Returns:
 |          (bool) The response from the server.
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |  
 |  vveerrssiioonn(self, *args, **kwargs)
 |      Returns version information from the server. Similar to the ``docker
 |      version`` command.
 |      
 |      Returns:
 |          (dict): The server version information
 |      
 |      Raises:
 |          :py:class:`docker.errors.APIError`
 |              If the server returns an error.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  ffrroomm__eennvv(**kwargs) from builtins.type
 |      Return a client configured from environment variables.
 |      
 |      The environment variables used are the same as those used by the
 |      Docker command-line client. They are:
 |      
 |      .. envvar:: DOCKER_HOST
 |      
 |          The URL to the Docker host.
 |      
 |      .. envvar:: DOCKER_TLS_VERIFY
 |      
 |          Verify the host against a CA certificate.
 |      
 |      .. envvar:: DOCKER_CERT_PATH
 |      
 |          A path to a directory containing TLS certificates to use when
 |          connecting to the Docker host.
 |      
 |      Args:
 |          version (str): The version of the API to use. Set to ``auto`` to
 |              automatically detect the server's version. Default: ``1.30``
 |          timeout (int): Default timeout for API calls, in seconds.
 |          ssl_version (int): A valid `SSL version`_.
 |          assert_hostname (bool): Verify the hostname of the server.
 |          environment (dict): The environment to read environment variables
 |              from. Default: the value of ``os.environ``
 |          credstore_env (dict): Override environment variables when calling
 |              the credential store process.
 |      
 |      Example:
 |      
 |          >>> import docker
 |          >>> client = docker.from_env()
 |      
 |      .. _`SSL version`:
 |          https://docs.python.org/3.5/library/ssl.html#ssl.PROTOCOL_TLSv1
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ccoonnffiiggss
 |      An object for managing configs on the server. See the
 |      :doc:`configs documentation <configs>` for full details.
 |  
 |  ccoonnttaaiinneerrss
 |      An object for managing containers on the server. See the
 |      :doc:`containers documentation <containers>` for full details.
 |  
 |  iimmaaggeess
 |      An object for managing images on the server. See the
 |      :doc:`images documentation <images>` for full details.
 |  
 |  nneettwwoorrkkss
 |      An object for managing networks on the server. See the
 |      :doc:`networks documentation <networks>` for full details.
 |  
 |  nnooddeess
 |      An object for managing nodes on the server. See the
 |      :doc:`nodes documentation <nodes>` for full details.
 |  
 |  pplluuggiinnss
 |      An object for managing plugins on the server. See the
 |      :doc:`plugins documentation <plugins>` for full details.
 |  
 |  sseeccrreettss
 |      An object for managing secrets on the server. See the
 |      :doc:`secrets documentation <secrets>` for full details.
 |  
 |  sseerrvviicceess
 |      An object for managing services on the server. See the
 |      :doc:`services documentation <services>` for full details.
 |  
 |  sswwaarrmm
 |      An object for managing a swarm on the server. See the
 |      :doc:`swarm documentation <swarm>` for full details.
 |  
 |  vvoolluummeess
 |      An object for managing volumes on the server. See the
 |      :doc:`volumes documentation <volumes>` for full details.
